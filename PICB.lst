CCS PCD C Compiler, Version 5.015, 5967               17-¾.Â.-18 05:49

               Filename:   C:\Users\HP\Documents\GitHub\Module6-7\PICB.lst

               ROM used:   3988 bytes (12%)
                           Largest free fragment is 26728
               RAM used:   216 (3%) at main() level
                           256 (3%) worst case
               Stack size: 30

*
0C00:  GOTO    1846
*
0C24:  GOTO    FD6
*
0C50:  GOTO    1158
.................... #include <24FJ48GA002.h> 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0DFC:  CLR     32
0DFE:  MOV     #E08,W3
0E00:  ADD     W3,W0,W0
0E02:  TBLRDL.B[W0],W0L
0E04:  CLR.B   1
0E06:  RETURN  
0E08:  DATA    73,74,00
0E0A:  DATA    61,74,00
0E0C:  DATA    65,25,00
0E0E:  DATA    64,20,00
0E10:  DATA    70,69,00
0E12:  DATA    63,32,00
0E14:  DATA    0A,00,00
0E16:  CLR     32
0E18:  MOV     #E22,W3
0E1A:  ADD     W3,W0,W0
0E1C:  TBLRDL.B[W0],W0L
0E1E:  CLR.B   1
0E20:  RETURN  
0E22:  DATA    73,74,00
0E24:  DATA    61,74,00
0E26:  DATA    65,25,00
0E28:  DATA    64,0A,00
0E2A:  DATA    00,00,00
0E2C:  MOV     W5,[W15++]
0E2E:  MOV     #C,W5
0E30:  REPEAT  #3
0E32:  MOV     [W5++],[W15++]
0E34:  CLR     W9
0E36:  MOV     #8000,W8
0E38:  BTSC.B  43.0
0E3A:  XOR     W8,W3,W3
0E3C:  CP0     W0
0E3E:  BRA     NZ,E46
0E40:  MOV     #7FFF,W10
0E42:  AND     W1,W10,W10
0E44:  BTSS.B  42.1
0E46:  MOV     W1,W10
0E48:  XOR     W3,W10,W11
0E4A:  MOV     W1,W6
0E4C:  MOV     W3,W7
0E4E:  MOV     W3,W12
0E50:  BCLR.B  42.1
0E52:  BCLR.B  42.0
0E54:  RLC     W6,W6
0E56:  SWAP    W6
0E58:  AND     #FF,W6
0E5A:  CP0     W6
0E5C:  BRA     Z,FA0
0E5E:  BCLR.B  42.1
0E60:  BCLR.B  42.0
0E62:  RLC     W7,W7
0E64:  SWAP    W7
0E66:  AND     #FF,W7
0E68:  CP0     W7
0E6A:  BRA     Z,FAA
0E6C:  BCLR.B  42.1
0E6E:  BCLR.B  42.0
0E70:  CP      W7,W6
0E72:  BRA     Z,FAC
0E74:  BRA     N,FBC
0E76:  BCLR    W9.0
0E78:  BSET    W9.1
0E7A:  SUB     W7,W6,W8
0E7C:  MOV     W7,W6
0E7E:  AND     #FF,W1
0E80:  BSET    W1.7
0E82:  AND     #FF,W3
0E84:  BSET    W3.7
0E86:  MOV     #28,W7
0E88:  CP      W7,W8
0E8A:  BRA     N,EAE
0E8C:  BCLR.B  42.1
0E8E:  BCLR.B  42.0
0E90:  RRC     W1,W1
0E92:  RRC     W0,W0
0E94:  DEC     W8,W8
0E96:  BRA     NZ,E8C
0E98:  BRA     EB4
0E9A:  MOV     #28,W7
0E9C:  CP      W7,W8
0E9E:  BRA     N,EB2
0EA0:  BCLR.B  42.1
0EA2:  BCLR.B  42.0
0EA4:  RRC     W3,W3
0EA6:  RRC     W2,W2
0EA8:  DEC     W8,W8
0EAA:  BRA     NZ,EA0
0EAC:  BRA     ECC
0EAE:  MOV     W2,W0
0EB0:  MOV     W3,W1
0EB2:  BRA     F3A
0EB4:  BTSS    W11.F
0EB6:  BRA     EDA
0EB8:  BTSC    W9.4
0EBA:  MOV     W12,W11
0EBC:  NEG     W0,W0
0EBE:  BRA     Z,EC4
0EC0:  COM.B   W1L,W1L
0EC2:  BRA     EC6
0EC4:  NEG     W1,W1
0EC6:  BTSC    W9.4
0EC8:  BRA     F20
0ECA:  BRA     EDA
0ECC:  BTSS    W11.F
0ECE:  BRA     EDA
0ED0:  NEG     W2,W2
0ED2:  BRA     Z,ED8
0ED4:  COM.B   W3L,W3L
0ED6:  BRA     EDA
0ED8:  NEG     W3,W3
0EDA:  AND     #FF,W5
0EDC:  BCLR.B  42.1
0EDE:  BCLR.B  42.0
0EE0:  ADD     W0,W2,W0
0EE2:  ADDC.B  W1L,W3L,W1L
0EE4:  BTSC.B  42.0
0EE6:  BSET    W9.3
0EE8:  BTSC    W9.0
0EEA:  BRA     EFE
0EEC:  BTSC    W9.1
0EEE:  BRA     EF2
0EF0:  BRA     F08
0EF2:  BTSC    W11.F
0EF4:  BRA     F20
0EF6:  BTSC    W9.3
0EF8:  BRA     F4C
0EFA:  BSET    W9.6
0EFC:  BRA     F3A
0EFE:  BTSC    W11.F
0F00:  BRA     F20
0F02:  BTSC    W9.3
0F04:  BRA     F4C
0F06:  BRA     F3A
0F08:  BCLR    W9.2
0F0A:  BTSC    W11.F
0F0C:  BRA     F16
0F0E:  MOV     W10,W11
0F10:  BTSC    W9.3
0F12:  BRA     F4C
0F14:  BRA     F82
0F16:  BSET    W9.4
0F18:  XOR.B   #80,W1L
0F1A:  BTSC    W1.7
0F1C:  BRA     EB8
0F1E:  MOV     W10,W11
0F20:  AND     #FF,W1
0F22:  IOR      W0,  W1,W7
0F24:  BRA     Z,F3A
0F26:  BTSC    W1.7
0F28:  BRA     F3A
0F2A:  BCLR.B  42.1
0F2C:  BCLR.B  42.0
0F2E:  RLC     W0,W0
0F30:  RLC     W1,W1
0F32:  DEC     W6,W6
0F34:  BTSC.B  42.1
0F36:  BRA     F9A
0F38:  BRA     F26
0F3A:  BTSC    W9.0
0F3C:  MOV     W10,W11
0F3E:  BTSC    W9.1
0F40:  MOV     W12,W11
0F42:  BTSS    W9.5
0F44:  BRA     F7A
0F46:  BTSC    W10.F
0F48:  BSET    W0.8
0F4A:  BRA     F82
0F4C:  BSET.B  42.0
0F4E:  RRC.B   W1L,W1L
0F50:  RRC     W0,W0
0F52:  BTSC.B  42.0
0F54:  BSET    W9.5
0F56:  INC     W6,W6
0F58:  BRA     Z,F9A
0F5A:  BTSS    W9.5
0F5C:  BRA     F6E
0F5E:  INC     W0,W0
0F60:  BRA     NZ,F6E
0F62:  INC.B   W1L,W1L
0F64:  BRA     NZ,F6E
0F66:  RRC.B   W1L,W1L
0F68:  RRC     W0,W0
0F6A:  INC     W6,W6
0F6C:  BRA     Z,F9A
0F6E:  BTSC    W9.0
0F70:  MOV     W10,W11
0F72:  BTSC    W9.1
0F74:  MOV     W12,W11
0F76:  BTSC.B  42.1
0F78:  BRA     F9A
0F7A:  BTSC    W9.6
0F7C:  MOV     W10,W11
0F7E:  BTSC    W9.7
0F80:  MOV     W12,W11
0F82:  IOR      W0,  W1,W2
0F84:  BRA     Z,FCC
0F86:  BCLR    W1.7
0F88:  SWAP    W6
0F8A:  BCLR.B  42.1
0F8C:  BCLR.B  42.0
0F8E:  RRC     W6,W6
0F90:  XOR     W6,W1,W1
0F92:  BSET    W1.F
0F94:  BTSS    W11.F
0F96:  BCLR    W1.F
0F98:  BRA     FCC
0F9A:  MOV     #0,W0
0F9C:  MOV     #0,W1
0F9E:  BRA     FCC
0FA0:  BTSC    W10.F
0FA2:  XOR     W8,W3,W3
0FA4:  MOV     W2,W0
0FA6:  MOV     W3,W1
0FA8:  BRA     FCC
0FAA:  BRA     FCC
0FAC:  AND     #FF,W3
0FAE:  BSET    W3.7
0FB0:  AND     #FF,W1
0FB2:  BSET    W1.7
0FB4:  BTSC    W11.F
0FB6:  BCLR    W3.7
0FB8:  BSET    W9.2
0FBA:  BRA     ECC
0FBC:  SUB     W6,W7,W8
0FBE:  AND     #FF,W1
0FC0:  BSET    W1.7
0FC2:  AND     #FF,W3
0FC4:  BSET    W3.7
0FC6:  BCLR    W9.1
0FC8:  BSET    W9.0
0FCA:  BRA     E9A
0FCC:  MOV     #12,W5
0FCE:  REPEAT  #3
0FD0:  MOV     [--W15],[W5--]
0FD2:  MOV     [--W15],W5
0FD4:  RETURN  
*
1026:  MOV     W5,[W15++]
1028:  MOV     W6,[W15++]
102A:  MOV     #8E,W1
102C:  BCLR    W6.0
102E:  BTSS    W0.F
1030:  BRA     1038
1032:  BSET    W6.0
1034:  NEG     W0,W0
1036:  BRA     1038
1038:  CP0     W0
103A:  BRA     Z,1064
103C:  BTSC    W0.F
103E:  BRA     1048
1040:  BCLR.B  42.0
1042:  RLC     W0,W0
1044:  DEC     W1,W1
1046:  BRA     103C
1048:  SWAP    W1
104A:  BCLR.B  42.0
104C:  RRC     W1,W1
104E:  BCLR    W0.F
1050:  SWAP    W0
1052:  XOR.B   W0L,W1L,W1L
1054:  AND.B   #0,W0L
1056:  BTSC    W6.0
1058:  BSET    W1.F
105A:  BRA     106A
105C:  MOV.B   W1L,W0L
105E:  BSET    W1.7
1060:  AND.B   #0,W1L
1062:  BRA     106A
1064:  CLR     W0
1066:  CLR     W1
1068:  BRA     106A
106A:  MOV     [--W15],W6
106C:  MOV     [--W15],W5
106E:  RETURN  
1070:  MOV     W0,W2
1072:  MOV     W1,W3
1074:  MOV.B   W1L,W0L
1076:  SWAP    W0
1078:  BSET    W0.F
107A:  RLC     W1,W1
107C:  SWAP    W1
107E:  ZE      W1,W1
1080:  MOV     #8E,W4
1082:  SUB.B   W4L,W1L,W1L
1084:  BRA     Z,1092
1086:  CP0     W0
1088:  BRA     Z,1092
108A:  BCLR.B  42.0
108C:  RRC     W0,W0
108E:  DEC     W1,W1
1090:  BRA     NZ,1086
1092:  BTSS    W3.F
1094:  BRA     109A
1096:  NEG     W0,W0
1098:  BRA     109A
109A:  RETURN  
*
11C6:  MOV     W5,[W15++]
11C8:  MOV     #C,W5
11CA:  REPEAT  #3
11CC:  MOV     [W5++],[W15++]
11CE:  BTSS    W0.F
11D0:  BRA     11EA
11D2:  NEG     W0,W0
11D4:  BSET    W4.8
11D6:  BTSS    W4.F
11D8:  BRA     11EA
11DA:  MOV     W0,[W15++]
11DC:  MOV     #2D,W0
11DE:  BTSC.B  223.1
11E0:  BRA     11DE
11E2:  MOV     W0,224
11E4:  MOV     [--W15],W0
11E6:  BCLR    W4.8
11E8:  DEC.B   0008
11EA:  CLR     W5
11EC:  MOV     W0,W7
11EE:  MOV     W4,W9
11F0:  BCLR    W4.F
11F2:  CP0.B   W4L
11F4:  BRA     NZ,1202
11F6:  BTSC    W9.F
11F8:  BRA     11FE
11FA:  MOV     #0,W5
11FC:  BRA     121C
11FE:  MOV     #0,W5
1200:  BRA     121C
1202:  SUB.B   W4L,#6,W5L
1204:  BRA     NC,121A
1206:  MOV     #30,W0
1208:  BTSS    W9.F
120A:  MOV     #20,W0
120C:  BTSC.B  223.1
120E:  BRA     120C
1210:  MOV     W0,224
1212:  DEC     W5,W5
1214:  BRA     NN,120C
1216:  MOV     #5,W5
1218:  BRA     121C
121A:  MOV     W4,W5
121C:  MOV     #6,W4
121E:  BTSC    W5.8
1220:  INC     W4,W4
1222:  BSET    W5.E
1224:  BTSC    W9.F
1226:  BSET    W5.F
1228:  MOV     #2710,W8
122A:  REPEAT  #11
122C:  DIV.U   W7,W8
122E:  CALL    1272
1232:  MOV     W1,W7
1234:  MOV     #3E8,W8
1236:  REPEAT  #11
1238:  DIV.U   W7,W8
123A:  CALL    1272
123E:  MOV     W1,W7
1240:  MOV     #64,W8
1242:  REPEAT  #11
1244:  DIV.U   W7,W8
1246:  CALL    1272
124A:  MOV     W1,W7
124C:  MOV     #A,W8
124E:  REPEAT  #11
1250:  DIV.U   W7,W8
1252:  CALL    1272
1256:  BTSS    W9.8
1258:  BRA     1264
125A:  MOV     #2D,W0
125C:  BTSC.B  223.1
125E:  BRA     125C
1260:  MOV     W0,224
1262:  BCLR    W9.8
1264:  MOV     #30,W0
1266:  ADD.B   W1L,W0L,W0L
1268:  MOV     W0,2A
126A:  BTSC.B  223.1
126C:  BRA     126A
126E:  MOV     W0,224
1270:  BRA     12B2
1272:  MOV     #30,W6
1274:  CP0     W0
1276:  BRA     NZ,1294
1278:  BTSS    W5.E
127A:  BRA     12A8
127C:  DEC     W4,W4
127E:  CP.B    W4L,W5L
1280:  BRA     Z,1286
1282:  BTSC.B  42.0
1284:  RETURN  
1286:  CP0     W0
1288:  BRA     NZ,1294
128A:  BTSS    W5.E
128C:  BRA     12A8
128E:  BTSS    W5.F
1290:  MOV     #20,W6
1292:  BRA     12A8
1294:  BCLR    W5.E
1296:  BTSS    W9.8
1298:  BRA     12A8
129A:  MOV     W0,W10
129C:  MOV     #2D,W0
129E:  BTSC.B  223.1
12A0:  BRA     129E
12A2:  MOV     W0,224
12A4:  BCLR    W9.8
12A6:  MOV     W10,W0
12A8:  ADD.B   W6L,W0L,W0L
12AA:  BTSC.B  223.1
12AC:  BRA     12AA
12AE:  MOV     W0,224
12B0:  RETURN  
12B2:  MOV     #12,W5
12B4:  REPEAT  #3
12B6:  MOV     [--W15],[W5--]
12B8:  MOV     [--W15],W5
12BA:  RETURN  
*
12E0:  MOV     W5,[W15++]
12E2:  MOV     #C,W5
12E4:  REPEAT  #4
12E6:  MOV     [W5++],[W15++]
12E8:  CLR     W9
12EA:  XOR     W1,W3,W9
12EC:  MOV     W1,W6
12EE:  MOV     W0,W5
12F0:  MOV     W3,W8
12F2:  MOV     W2,W7
12F4:  RLC     W1,W1
12F6:  SWAP    W1
12F8:  ZE      W1,W1
12FA:  CP0     W1
12FC:  BRA     Z,139A
12FE:  RLC     W3,W3
1300:  SWAP    W3
1302:  ZE      W3,W3
1304:  CP0     W3
1306:  BRA     Z,139A
1308:  CLR     W0
130A:  SUB.B   W1L,W3L,W0L
130C:  BRA     NC,1314
130E:  ADD.B   #7F,W0L
1310:  BRA     C,139A
1312:  BRA     131A
1314:  SUB.B   #81,W0L
1316:  BRA     NC,139A
1318:  BRA     Z,139A
131A:  MOV     W5,W1
131C:  MOV     W6,W2
131E:  BSET    W2.7
1320:  AND     #FF,W2
1322:  AND     #FF,W8
1324:  BSET    W8.7
1326:  MOV     #19,W10
1328:  CLR     W3
132A:  CLR     W4
132C:  SUB     W1,W7,W1
132E:  SUBB    W2,W8,W2
1330:  BRA     N,1336
1332:  BRA     C,133C
1334:  BRA     NZ,133E
1336:  ADD     W1,W7,W1
1338:  ADDC    W2,W8,W2
133A:  BRA     133E
133C:  BSET    W4.0
133E:  DEC     W10,W10
1340:  BRA     Z,1350
1342:  BCLR.B  42.0
1344:  RLC     W1,W1
1346:  RLC     W2,W2
1348:  BCLR.B  42.0
134A:  RLC     W4,W4
134C:  RLC     W3,W3
134E:  BRA     132C
1350:  CLR     W10
1352:  BTSC    W3.8
1354:  BRA     1358
1356:  BRA     1364
1358:  BCLR.B  42.0
135A:  RRC     W3,W3
135C:  BCLR    W3.7
135E:  RRC     W4,W4
1360:  RLC     W10,W10
1362:  BRA     1368
1364:  DEC     W0,W0
1366:  BRA     Z,139A
1368:  BTSC    W10.F
136A:  BRA     NC,1376
136C:  RLC     W1,W1
136E:  RLC     W2,W2
1370:  SUB     W1,W7,W1
1372:  SUBB    W2,W8,W2
1374:  BRA     NC,1388
1376:  INC     W4,W4
1378:  BRA     NZ,1388
137A:  INC     W3,W3
137C:  BRA     NZ,1388
137E:  INC     W0,W0
1380:  BRA     Z,139A
1382:  BRA     1388
1384:  DEC     W0,W0
1386:  BRA     Z,139A
1388:  SWAP    W0
138A:  RRC     W0,W1
138C:  BSET    W1.F
138E:  BTSS    W9.F
1390:  BCLR    W1.F
1392:  BCLR    W3.7
1394:  XOR.B   W3L,W1L,W1L
1396:  MOV     W4,W0
1398:  BRA     13A0
139A:  MOV     #0,W0
139C:  MOV     #0,W1
139E:  BRA     13A0
13A0:  MOV     #14,W5
13A2:  REPEAT  #4
13A4:  MOV     [--W15],[W5--]
13A6:  MOV     [--W15],W5
13A8:  RETURN  
13AA:  MOV     W5,[W15++]
13AC:  MOV     #C,W5
13AE:  REPEAT  #4
13B0:  MOV     [W5++],[W15++]
13B2:  MOV     W0,W4
13B4:  MOV     W1,W5
13B6:  MOV     W3,W7
13B8:  MOV     W2,W6
13BA:  BCLR.B  42.0
13BC:  BCLR.B  42.1
13BE:  RLC     W1,W1
13C0:  SWAP    W1
13C2:  AND     #FF,W1
13C4:  CP0     W1
13C6:  BRA     Z,145E
13C8:  BCLR.B  42.0
13CA:  BCLR.B  42.1
13CC:  RLC     W3,W3
13CE:  SWAP    W3
13D0:  AND     #FF,W3
13D2:  CP0     W3
13D4:  BRA     Z,145E
13D6:  ZE      W0,W0
13D8:  ADD.B   W3L,W1L,W0L
13DA:  BRA     C,13E4
13DC:  SUB     #7F,W0
13DE:  BRA     Z,145E
13E0:  BRA     NC,145E
13E2:  BRA     13E8
13E4:  ADD.B   #81,W0L
13E6:  BRA     C,145E
13E8:  XOR     W5,W7,W10
13EA:  BCLR.B  42.0
13EC:  BCLR.B  42.1
13EE:  AND     #FF,W5
13F0:  BSET    W5.7
13F2:  BCLR.B  42.0
13F4:  AND     #FF,W7
13F6:  BSET    W7.7
13F8:  MUL.UU  W4,W6,W2
13FA:  MUL.UU  W5,W6,W8
13FC:  ADDC    W8,W3,W3
13FE:  MOV     W9,W1
1400:  BTSC.B  42.0
1402:  INC     W1,W1
1404:  BCLR.B  42.0
1406:  MUL.UU  W7,W4,W8
1408:  ADDC    W8,W3,W3
140A:  ADDC    W9,W1,W1
140C:  MUL.UU  W5,W7,W8
140E:  ADDC    W8,W1,W1
1410:  INC     W0,W0
1412:  CP0     W1
1414:  BTSC.B  42.1
1416:  BRA     141A
1418:  BRA     1420
141A:  CP0     W3
141C:  BTSC.B  42.1
141E:  BRA     142A
1420:  BTSC    W1.F
1422:  BRA     142A
1424:  RLC     W3,W3
1426:  RLC     W1,W1
1428:  DEC     W0,W0
142A:  MOV     W1,W2
142C:  BCLR.B  42.0
142E:  BTSS    W3.7
1430:  BRA     1444
1432:  MOV     #FF00,W7
1434:  AND     W3,W7,W3
1436:  ADD     #100,W3
1438:  ADDC    W2,#0,W2
143A:  CP0     W2
143C:  BRA     NZ,1444
143E:  CP0     W3
1440:  BRA     NZ,1444
1442:  INC     W0,W0
1444:  SWAP    W0
1446:  BCLR.B  42.0
1448:  BCLR.B  42.1
144A:  RRC     W0,W1
144C:  BTSC    W10.F
144E:  BSET    W1.F
1450:  BCLR    W2.F
1452:  SWAP    W2
1454:  XOR.B   W2L,W1L,W1L
1456:  SWAP    W3
1458:  MOV.B   W3L,W2L
145A:  MOV     W2,W0
145C:  BRA     1464
145E:  MOV     #0,W0
1460:  MOV     #0,W1
1462:  BRA     1464
1464:  MOV     #14,W5
1466:  REPEAT  #4
1468:  MOV     [--W15],[W5--]
146A:  MOV     [--W15],W5
146C:  RETURN  
146E:  MOV     W5,[W15++]
1470:  MOV     W6,[W15++]
1472:  MOV     W7,[W15++]
1474:  XOR     W1,W3,W4
1476:  BTSS    W4.F
1478:  BRA     1486
147A:  BCLR.B  42.0
147C:  BCLR.B  42.1
147E:  BTSS    W1.F
1480:  BRA     14CE
1482:  BSET.B  42.0
1484:  BRA     14CE
1486:  MOV     W1,W4
1488:  MOV     W0,W5
148A:  MOV     W3,W6
148C:  MOV     W2,W7
148E:  RLC     W1,W1
1490:  SWAP    W1
1492:  RLC     W3,W3
1494:  SWAP    W3
1496:  SUB.B   W3L,W1L,W1L
1498:  BRA     Z,14A4
149A:  BTSS    W4.F
149C:  BRA     14CE
149E:  MOV     #1,W0
14A0:  XOR.B   42
14A2:  BRA     14CE
14A4:  MOV.B   W4L,W1L
14A6:  MOV.B   W6L,W3L
14A8:  BCLR    W1.7
14AA:  BCLR    W3.7
14AC:  SUB.B   W3L,W1L,W1L
14AE:  BRA     Z,14BA
14B0:  BTSS    W4.F
14B2:  BRA     14CE
14B4:  MOV     #1,W0
14B6:  XOR.B   42
14B8:  BRA     14CE
14BA:  SUB     W7,W5,W1
14BC:  BRA     Z,14C8
14BE:  BTSS    W4.F
14C0:  BRA     14CE
14C2:  MOV     #1,W0
14C4:  XOR.B   42
14C6:  BRA     14CE
14C8:  BCLR.B  42.0
14CA:  BRA     14CE
14CC:  BRA     14CE
14CE:  MOV     [--W15],W7
14D0:  MOV     [--W15],W6
14D2:  MOV     [--W15],W5
14D4:  RETURN  
*
1682:  MOV     W6,[W15++]
1684:  MOV     W7,[W15++]
1686:  MOV     W8,[W15++]
1688:  MOV     W9,[W15++]
168A:  CLR     W4
168C:  CLR     W5
168E:  CLR     W6
1690:  CLR     W7
1692:  XOR     W2,W3,W8
1694:  BRA     Z,16B8
1696:  MOV     #20,W8
1698:  BCLR.B  42.0
169A:  RLC     W0,W0
169C:  RLC     W1,W1
169E:  RLC     W4,W4
16A0:  RLC     W5,W5
16A2:  CP      W5,W3
16A4:  BRA     NZ,16A8
16A6:  CPB     W4,W2
16A8:  BRA     NC,16B0
16AA:  SUB     W4,W2,W4
16AC:  SUBB    W5,W3,W5
16AE:  BSET.B  42.0
16B0:  RLC     W6,W6
16B2:  RLC     W7,W7
16B4:  DEC     W8,W8
16B6:  BRA     NZ,1698
16B8:  MOV     W7,W1
16BA:  MOV     W6,W0
16BC:  MOV     [--W15],W9
16BE:  MOV     [--W15],W8
16C0:  MOV     [--W15],W7
16C2:  MOV     [--W15],W6
16C4:  RETURN  
16C6:  MOV     W5,[W15++]
16C8:  MOV     #C,W5
16CA:  REPEAT  #7
16CC:  MOV     [W5++],[W15++]
16CE:  BTSS    W1.F
16D0:  BRA     16E0
16D2:  NEG     W0,W0
16D4:  BRA     Z,16D8
16D6:  BRA     NZ,16DC
16D8:  NEG     W1,W1
16DA:  BRA     16DE
16DC:  COM     W1,W1
16DE:  BSET    W4.8
16E0:  CLR     W5
16E2:  MOV     W0,W6
16E4:  MOV     W1,W7
16E6:  MOV     W4,W12
16E8:  BCLR    W4.F
16EA:  CP0.B   W4L
16EC:  BRA     NZ,16F0
16EE:  BRA     1720
16F0:  SUB.B   W4L,#B,W5L
16F2:  BRA     NC,1720
16F4:  SUB.B   W4L,W5L,W4L
16F6:  BTSS    W12.F
16F8:  BRA     1710
16FA:  BTSS    W4.8
16FC:  BRA     170C
16FE:  MOV     #2D,W0
1700:  BTSC.B  223.1
1702:  BRA     1700
1704:  MOV     W0,224
1706:  BCLR    W4.8
1708:  DEC     W5,W5
170A:  BRA     N,1720
170C:  MOV     #30,W0
170E:  BRA     1712
1710:  MOV     #20,W0
1712:  BTSC.B  223.1
1714:  BRA     1712
1716:  MOV     W0,224
1718:  DEC     W5,W5
171A:  BRA     NN,1712
171C:  BTSC    W4.8
171E:  DEC.B   W4L,W4L
1720:  MOV     #E,W8
1722:  MOV     #0,W9
1724:  LNK     #10
1726:  MOV     W12,[W14+W8]
1728:  DEC2    W8,W8
172A:  BRA     NN,1726
172C:  MOV     W4,W5
172E:  MOV     #A,W4
1730:  BTSC    W5.8
1732:  INC     W4,W4
1734:  BSET    W5.E
1736:  BTSC    W12.F
1738:  BSET    W5.F
173A:  CP0.B   W5L
173C:  BRA     Z,1740
173E:  DEC.B   W5L,W5L
1740:  MOV     W4,[W14]
1742:  MOV     W5,[W14+#2]
1744:  MOV     W6,W0
1746:  MOV     W7,W1
1748:  MOV     #CA00,W2
174A:  MOV     #3B9A,W3
174C:  MOV     #2710,W8
174E:  BCLR    W13.F
1750:  BCLR.B  43.0
1752:  CALL    1682
1756:  BTG     W13.F
1758:  BTSC    W13.F
175A:  BRA     176A
175C:  MOV     W0,[W14+#8]
175E:  MOV     W1,[W14+#A]
1760:  MOV     W0,W2
1762:  MOV     W1,W3
1764:  MOV     [W14+#4],W0
1766:  MOV     [W14+#6],W1
1768:  BRA     1750
176A:  MOV     W2,[W14+#8]
176C:  MOV     W3,[W14+#A]
176E:  MOV     W4,[W14+#4]
1770:  MOV     W5,[W14+#6]
1772:  MOV     [W14],W4
1774:  MOV     [W14+#2],W5
1776:  MOV     #30,W6
1778:  CP0     W0
177A:  BRA     NZ,179E
177C:  BTSS    W5.E
177E:  BRA     17A2
1780:  DEC     W4,W4
1782:  MOV     W4,[W14]
1784:  CP0     W4
1786:  BRA     Z,17A2
1788:  CP.B    W4L,W5L
178A:  BRA     Z,1790
178C:  BTSC.B  42.0
178E:  BRA     17C0
1790:  BTSS    W5.F
1792:  BRA     179A
1794:  BTSS    W5.8
1796:  BRA     17B8
1798:  BRA     17A8
179A:  MOV     #20,W6
179C:  BRA     17B8
179E:  BCLR    W5.E
17A0:  MOV     W5,[W14+#2]
17A2:  MOV     [W14+#2],W5
17A4:  BTSS    W5.8
17A6:  BRA     17B8
17A8:  BCLR    W5.8
17AA:  MOV     W5,[W14+#2]
17AC:  MOV     W0,W10
17AE:  MOV     #2D,W0
17B0:  BTSC.B  223.1
17B2:  BRA     17B0
17B4:  MOV     W0,224
17B6:  MOV     W10,W0
17B8:  ADD.B   W6L,W0L,W0L
17BA:  BTSC.B  223.1
17BC:  BRA     17BA
17BE:  MOV     W0,224
17C0:  MOV     [W14+#8],W0
17C2:  MOV     [W14+#A],W1
17C4:  MOV     #A,W2
17C6:  CLR     W3
17C8:  CP      W0,#1
17CA:  BRA     Z,17CE
17CC:  BRA     1750
17CE:  ULNK    
17D0:  MOV     #1A,W5
17D2:  REPEAT  #7
17D4:  MOV     [--W15],[W5--]
17D6:  MOV     [--W15],W5
17D8:  RETURN  
....................  
.................... #list 
....................  
.................... #include "BL_Support.h" 
.................... /*  
....................  * File:    BL_Support.h 
....................  * Author:  Dr.Santi Nuratch 
....................  *          Embedded Computing and Control Lab., INC-KMUTT 
....................  * Created on 22 September 2016, 13:14 
....................  */ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... #use delay (internal = 8MHz, clock = 32MHz) 
*
17FE:  CP0     W0
1800:  BTSC.B  42.1
1802:  BRA     180C
1804:  REPEAT  #3E7B
1806:  NOP     
1808:  DEC     W0,W0
180A:  BRA     NZ,1804
180C:  RETURN  
.................... #PIN_SELECT U1RX = PIN_B12 
.................... #PIN_SELECT U1TX = PIN_B13 
.................... #PIN_SELECT OC1 = PIN_B3 
.................... #PIN_SELECT OC2 = PIN_B2 
.................... #PIN_SELECT OC5 = PIN_B14 
....................  
.................... #use rs232(UART1, BAUD = 9600, XMIT = PIN_B13, RCV = PIN_B12) 
.................... float e,s,p,theta_d,count =0; 
.................... int u,Kp,Ki,Kd; 
.................... int direction=1,state,id,data,sign,Z,Duty_Servo,action; 
.................... char SM_id = 1; 
.................... int getPackage = 0; 
.................... float array[8]; 
.................... float A =0.000; 
.................... #define DEVICE_ID   22 
....................  
.................... char* print_float(float data){ 
.................... 	int intDist = data / 1; 
....................     int dotDist = (((intDist>>15)*-2)+1) * ((data * 1000.0f) - (intDist * 1000)); 
....................     char stringFloat[20]; 
....................     sprintf(stringFloat, "%d.%d", intDist, dotDist); 
....................     return stringFloat; 
.................... } 
.................... void print_float(char* stringResult, float data){ 
.................... 	int intDist = data / 1; 
....................     int dotDist = (((intDist>>15)*-2)+1) * ((data * 1000.0f) - (intDist * 1000)); 
....................     sprintf(stringResult, "%d.%d", intDist, dotDist); 
.................... } 
.................... #INT_EXT0 
.................... void INT_EXT_INPUT0(void){ 
*
0FD6:  PUSH    42
0FD8:  PUSH    36
0FDA:  PUSH    32
0FDC:  MOV     W0,[W15++]
0FDE:  MOV     #2,W0
0FE0:  REPEAT  #C
0FE2:  MOV     [W0++],[W15++]
.................... 	if(direction == 1){ 
0FE4:  MOV     876,W4
0FE6:  CP      W4,#1
0FE8:  BRA     NZ,FFE
.................... 	//	count+=1; 
.................... 		count+=0.0056; 
0FEA:  BCLR.B  43.0
0FEC:  MOV     86A,W0
0FEE:  MOV     86C,W1
0FF0:  MOV     #8034,W2
0FF2:  MOV     #3BB7,W3
0FF4:  CALL    E2C
0FF8:  MOV     W0,86A
0FFA:  MOV     W1,86C
.................... 		//count+=0.005328; 
.................... 	}else if(direction == 0){ 
0FFC:  BRA     1014
0FFE:  CP0     876
1000:  BRA     NZ,1014
.................... 		count-=0.0056; 
1002:  BSET.B  43.0
1004:  MOV     86A,W0
1006:  MOV     86C,W1
1008:  MOV     #8034,W2
100A:  MOV     #3BB7,W3
100C:  CALL    E2C
1010:  MOV     W0,86A
1012:  MOV     W1,86C
.................... 		//count-=0.005328; 
.................... 	} 
1014:  BCLR.B  84.0
1016:  MOV     #1A,W0
1018:  REPEAT  #C
101A:  MOV     [--W15],[W0--]
101C:  MOV     [--W15],W0
101E:  POP     32
1020:  POP     36
1022:  POP     42
1024:  RETFIE  
.................... } 
.................... void Init_Interrupts() { 
.................... disable_interrupts(GLOBAL); 
*
118A:  BCLR.B  81.7
118C:  MOV     #E0,W4
118E:  MOV     W4,42
1190:  BSET.B  81.7
.................... setup_timer2(TMR_INTERNAL | TMR_DIV_BY_8,2000); 
1192:  CLR     110
1194:  MOV     #7D0,W4
1196:  MOV     W4,10C
1198:  MOV     #8010,W4
119A:  MOV     W4,110
.................... setup_timer3(TMR_INTERNAL | TMR_DIV_BY_256,189); //330 HZ 
119C:  CLR     112
119E:  MOV     #BD,W4
11A0:  MOV     W4,10E
11A2:  MOV     #8030,W4
11A4:  MOV     W4,112
.................... enable_interrupts(INT_EXT0); 
11A6:  BSET.B  94.0
.................... ext_int_edge(0,L_TO_H); // Rising Edge 
11A8:  BCLR.B  82.0
.................... clear_interrupt(INT_RDA);   
11AA:  REPEAT  #3
11AC:  MOV     226,W0
11AE:  BCLR.B  85.3
.................... enable_interrupts(INT_RDA); 
11B0:  BSET.B  95.3
.................... enable_interrupts(GLOBAL); 
11B2:  BCLR.B  81.7
11B4:  CLR     42
11B6:  BSET.B  81.7
.................... setup_compare(1,COMPARE_PWM|COMPARE_TIMER2); 
11B8:  MOV     #6,W4
11BA:  MOV     W4,184
.................... setup_compare(2,COMPARE_PWM|COMPARE_TIMER2); 
11BC:  MOV     #6,W4
11BE:  MOV     W4,18A
.................... setup_compare(5,COMPARE_PWM|COMPARE_TIMER3); 
11C0:  MOV     #E,W4
11C2:  MOV     W4,19C
11C4:  RETURN  
.................... } 
.................... void grab(int Servo_D) 
.................... { 
.................... 	if( Servo_D == 1){ 
*
17DA:  MOV     8B4,W4
17DC:  CP      W4,#1
17DE:  BRA     NZ,17E6
.................... 		set_pwm_duty(5,100); 
17E0:  MOV     #64,W4
17E2:  MOV     W4,198
.................... } 
17E4:  BRA     17FC
.................... 	else if (Servo_D == 2){ 
17E6:  MOV     8B4,W4
17E8:  CP      W4,#2
17EA:  BRA     NZ,17F2
.................... 		set_pwm_duty(5,112); 
17EC:  MOV     #70,W4
17EE:  MOV     W4,198
.................... } 
17F0:  BRA     17FC
.................... 	else if (Servo_D == 3){ 
17F2:  MOV     8B4,W4
17F4:  CP      W4,#3
17F6:  BRA     NZ,17FC
.................... 		set_pwm_duty(5,135); 
17F8:  MOV     #87,W4
17FA:  MOV     W4,198
.................... }	 
17FC:  RETURN  
.................... } 
....................  
.................... void grip(int Servo_D) 
*
180E:  PUSH    8B4
1810:  POP     8B6
.................... { 
.................... 	int  D = Servo_D; 
.................... 	Duty_Servo = D*64 ; 
1812:  MOV     8B6,W4
1814:  MOV     #40,W3
1816:  MUL.SS  W4,W3,W0
1818:  MOV     W0,882
.................... 	Duty_Servo = Duty_Servo/135; 
181A:  MOV     882,W4
181C:  MOV     #87,W3
181E:  REPEAT  #11
1820:  DIV.S   W4,W3
1822:  MOV     W0,882
.................... 	printf("%d\n" ,Duty_Servo); 
1824:  MOV     882,W0
1826:  MOV     #0,W4
1828:  CALL    11C6
182C:  BTSC.B  223.1
182E:  BRA     182C
1830:  MOV     #A,W4
1832:  MOV     W4,224
.................... 	delay_ms(100);	 
1834:  MOV     #64,W0
1836:  CALL    17FE
.................... 	Duty_Servo =  Duty_Servo+26; 
183A:  MOV     882,W4
183C:  ADD     W4,#1A,W4
183E:  MOV     W4,882
.................... 	set_pwm_duty(5,Duty_Servo); 
1840:  PUSH    882
1842:  POP     198
1844:  RETURN  
.................... }	 
....................  
.................... void driveMotor(int duty){ 
*
14D6:  MOV     W5,[W15++]
.................... 	if (duty>100){ 
14D8:  MOV     8BC,W4
14DA:  MOV     #64,W3
14DC:  CP      W3,W4
14DE:  BRA     GE,14E6
.................... 		duty = 100; 
14E0:  MOV     #64,W4
14E2:  MOV     W4,8BC
.................... 	} 
14E4:  BRA     14F2
.................... 	else if (duty<-100){ 
14E6:  MOV     8BC,W4
14E8:  MOV     #FF9C,W3
14EA:  CP      W3,W4
14EC:  BRA     LE,14F2
.................... 		duty = -100; 
14EE:  MOV     #FF9C,W4
14F0:  MOV     W4,8BC
.................... 	} 
.................... 	duty = duty*20; 
14F2:  MOV     8BC,W4
14F4:  MUL.UU  W4,#14,W0
14F6:  MOV     W0,8BC
.................... 	if (duty < 0){ 
14F8:  MOV     8BC,W4
14FA:  CP      W4,#0
14FC:  BRA     GE,1514
.................... 	set_pwm_duty(1,abs(duty));	 
14FE:  MOV     8BC,W0
1500:  BTSS    W0.F
1502:  BRA     150A
1504:  MOV     #0,W4
1506:  MOV     8BC,W3
1508:  SUB     W4,W3,W0
150A:  MOV     W0,W5
150C:  MOV     W5,180
.................... 	set_pwm_duty(2,0);			 
150E:  CLR     186
.................... 	direction=0;		 
1510:  CLR     876
.................... 	} 
1512:  BRA     1530
....................  
.................... 	else if (duty>=0){ 
1514:  MOV     8BC,W4
1516:  CP      W4,#0
1518:  BRA     LT,1530
.................... 	set_pwm_duty(1,0);	 
151A:  CLR     180
.................... 	set_pwm_duty(2,abs(duty));		 
151C:  MOV     8BC,W0
151E:  BTSS    W0.F
1520:  BRA     1528
1522:  MOV     #0,W4
1524:  MOV     8BC,W3
1526:  SUB     W4,W3,W0
1528:  MOV     W0,W5
152A:  MOV     W5,186
.................... 	direction = 1; 
152C:  MOV     #1,W4
152E:  MOV     W4,876
.................... 	} 
1530:  MOV     [--W15],W5
1532:  RETURN  
.................... } 
.................... void setzero() 
*
12BC:  MOV     W5,[W15++]
.................... { 
.................... 	do{		// Turn down motorA cw 
.................... 		set_pwm_duty(1,2000);+	 
12BE:  MOV     #7D0,W4
12C0:  MOV     W4,180
.................... 		set_pwm_duty(2,0);			 
12C2:  CLR     186
.................... 		} 
.................... 	while(input_state(PIN_B5)==1);		//PIN_B4 = DI0 
12C4:  BTSC.B  2CA.5
12C6:  BRA     12BE
.................... 	do{		// Turn right motorA cw 
.................... 		set_pwm_duty(1,0);	 
12C8:  CLR     180
.................... 		set_pwm_duty(2,2000);			 
12CA:  MOV     #7D0,W4
12CC:  MOV     W4,186
.................... 		} 
.................... 	while(input_state(PIN_B4)==1);		//PIN_B5 = DI1 
12CE:  BTSC.B  2CA.4
12D0:  BRA     12C8
.................... 		set_pwm_duty(1,0);				//motorA stop (0,0) 
12D2:  CLR     180
.................... 		set_pwm_duty(2,0);			 
12D4:  CLR     186
.................... 		//printf("setzero finish"); 
.................... 		count =0; 
12D6:  CLR     86A
12D8:  CLR     86C
.................... 		u = 0; 
12DA:  CLR     86E
12DC:  MOV     [--W15],W5
12DE:  RETURN  
.................... } 
.................... void pid(float delta_a){ 
*
1534:  MOV     W5,[W15++]
1536:  MOV     W6,[W15++]
1538:  MOV     W7,[W15++]
153A:  MOV     W8,[W15++]
.................... 		theta_d = delta_a; 
153C:  PUSH    8B4
153E:  POP     866
1540:  PUSH    8B6
1542:  POP     868
.................... 		e = theta_d - count; 
1544:  BSET.B  43.0
1546:  PUSH    42
1548:  BCLR.B  81.7
154A:  SETM.B  42
154C:  BSET.B  81.7
154E:  MOV     866,W0
1550:  MOV     868,W1
1552:  MOV     86A,W2
1554:  MOV     86C,W3
1556:  CALL    E2C
155A:  BCLR.B  81.7
155C:  POP     42
155E:  BSET.B  81.7
1560:  MOV     W0,85A
1562:  MOV     W1,85C
.................... 		s = s+e; 
1564:  BCLR.B  43.0
1566:  PUSH    42
1568:  BCLR.B  81.7
156A:  SETM.B  42
156C:  BSET.B  81.7
156E:  MOV     85E,W0
1570:  MOV     860,W1
1572:  MOV     85A,W2
1574:  MOV     85C,W3
1576:  CALL    E2C
157A:  BCLR.B  81.7
157C:  POP     42
157E:  BSET.B  81.7
1580:  MOV     W0,85E
1582:  MOV     W1,860
.................... 		if(abs(e)>0.15){ 
1584:  MOV     85A,W0
1586:  MOV     85C,W1
1588:  BCLR    W1.F
158A:  MOV     W0,W5
158C:  MOV     W1,W6
158E:  MOV     #999A,W0
1590:  MOV     #3E19,W1
1592:  MOV     W5,W2
1594:  MOV     W6,W3
1596:  CALL    146E
159A:  BRA     NC,1666
.................... 			u = Kp*e+Ki*s+Kd*(e-p); 
159C:  PUSH    42
159E:  BCLR.B  81.7
15A0:  SETM.B  42
15A2:  BSET.B  81.7
15A4:  MOV     870,W0
15A6:  CALL    1026
15AA:  BCLR.B  81.7
15AC:  POP     42
15AE:  BSET.B  81.7
15B0:  MOV     85A,W2
15B2:  MOV     85C,W3
15B4:  CALL    13AA
15B8:  MOV     W0,W5
15BA:  MOV     W1,W6
15BC:  PUSH    42
15BE:  BCLR.B  81.7
15C0:  SETM.B  42
15C2:  BSET.B  81.7
15C4:  MOV     872,W0
15C6:  CALL    1026
15CA:  BCLR.B  81.7
15CC:  POP     42
15CE:  BSET.B  81.7
15D0:  MOV     85E,W2
15D2:  MOV     860,W3
15D4:  CALL    13AA
15D8:  BCLR.B  43.0
15DA:  PUSH    42
15DC:  BCLR.B  81.7
15DE:  SETM.B  42
15E0:  BSET.B  81.7
15E2:  MOV     W0,W2
15E4:  MOV     W1,W3
15E6:  MOV     W5,W0
15E8:  MOV     W6,W1
15EA:  CALL    E2C
15EE:  BCLR.B  81.7
15F0:  POP     42
15F2:  BSET.B  81.7
15F4:  MOV     W0,W5
15F6:  MOV     W1,W6
15F8:  BSET.B  43.0
15FA:  PUSH    42
15FC:  BCLR.B  81.7
15FE:  SETM.B  42
1600:  BSET.B  81.7
1602:  MOV     85A,W0
1604:  MOV     85C,W1
1606:  MOV     862,W2
1608:  MOV     864,W3
160A:  CALL    E2C
160E:  BCLR.B  81.7
1610:  POP     42
1612:  BSET.B  81.7
1614:  MOV     W0,W7
1616:  MOV     W1,W8
1618:  PUSH    42
161A:  BCLR.B  81.7
161C:  SETM.B  42
161E:  BSET.B  81.7
1620:  MOV     874,W0
1622:  CALL    1026
1626:  BCLR.B  81.7
1628:  POP     42
162A:  BSET.B  81.7
162C:  MOV     W7,W2
162E:  MOV     W8,W3
1630:  CALL    13AA
1634:  BCLR.B  43.0
1636:  PUSH    42
1638:  BCLR.B  81.7
163A:  SETM.B  42
163C:  BSET.B  81.7
163E:  MOV     W0,W2
1640:  MOV     W1,W3
1642:  MOV     W5,W0
1644:  MOV     W6,W1
1646:  CALL    E2C
164A:  BCLR.B  81.7
164C:  POP     42
164E:  BSET.B  81.7
1650:  PUSH    42
1652:  BCLR.B  81.7
1654:  SETM.B  42
1656:  BSET.B  81.7
1658:  CALL    1070
165C:  BCLR.B  81.7
165E:  POP     42
1660:  BSET.B  81.7
1662:  MOV     W0,86E
.................... 		} 
1664:  BRA     1668
.................... 		else{ 
.................... 			u = 0; 
1666:  CLR     86E
.................... 		} 
.................... 		driveMotor(u); 
1668:  PUSH    86E
166A:  POP     8BC
166C:  CALL    14D6
.................... 		p = e; 
1670:  PUSH    85A
1672:  POP     862
1674:  PUSH    85C
1676:  POP     864
1678:  MOV     [--W15],W8
167A:  MOV     [--W15],W7
167C:  MOV     [--W15],W6
167E:  MOV     [--W15],W5
1680:  RETURN  
.................... } 
....................  
....................  
.................... void SM_RxD(int c){ 
*
109C:  MOV     W5,[W15++]
.................... 		if (SM_id <= 2){ 
109E:  MOV.B   886,W0L
10A0:  SE      W0,W0
10A2:  CP      W0,#2
10A4:  BRA     GT,10B6
.................... 			if (c == 255){ // bit 1-2 Check 
10A6:  MOV     8D2,W4
10A8:  XOR     #FF,W4
10AA:  BRA     NZ,10B0
.................... 				SM_id++; 
10AC:  INC.B   0886
.................... 		}else{ 
10AE:  BRA     10B4
.................... 				SM_id = 1; 
10B0:  MOV.B   #1,W0L
10B2:  MOV.B   W0L,886
.................... 		} 
.................... 		} 
10B4:  BRA     1154
.................... 		else if (SM_id == 3){  // bit 3 Device id 
10B6:  MOV.B   886,W0L
10B8:  SE      W0,W0
10BA:  CP      W0,#3
10BC:  BRA     NZ,10CC
.................... 			if (c == DEVICE_ID){ 
10BE:  MOV     8D2,W4
10C0:  CP      W4,#16
10C2:  BRA     NZ,10CA
.................... 				id = c; 
10C4:  PUSH    8D2
10C6:  POP     87A
.................... 				SM_id++; 
10C8:  INC.B   0886
.................... 		} 
.................... 		} 
10CA:  BRA     1154
.................... 		else if (SM_id == 4){ // bit 4 Action 
10CC:  MOV.B   886,W0L
10CE:  SE      W0,W0
10D0:  CP      W0,#4
10D2:  BRA     NZ,10F8
.................... 			SM_id++; 
10D4:  INC.B   0886
.................... 			if (c <= 5 ){ 
10D6:  MOV     8D2,W4
10D8:  CP      W4,#5
10DA:  BRA     GT,10E2
.................... 				state = c; 
10DC:  PUSH    8D2
10DE:  POP     878
.................... 			} 
10E0:  BRA     10F6
.................... 			else if (c == 1) // setzero 
10E2:  MOV     8D2,W4
10E4:  CP      W4,#1
10E6:  BRA     NZ,10F2
.................... 			{ 
.................... 			getPackage = 1; 
10E8:  MOV     #1,W4
10EA:  MOV     W4,888
.................... 			SM_id = 1; 
10EC:  MOV.B   #1,W0L
10EE:  MOV.B   W0L,886
.................... 			} 
10F0:  BRA     10F6
.................... 			else{ 
.................... 				SM_id = 1; 
10F2:  MOV.B   #1,W0L
10F4:  MOV.B   W0L,886
.................... 			} 
.................... 		} 
10F6:  BRA     1154
.................... 		else if (SM_id >= 5 && SM_id <= 7){ // bit 5 direction bit 6-7 data 
10F8:  MOV.B   886,W0L
10FA:  SE      W0,W0
10FC:  CP      W0,#5
10FE:  BRA     LT,1144
1100:  MOV.B   886,W0L
1102:  SE      W0,W0
1104:  CP      W0,#7
1106:  BRA     GT,1144
.................... 			if(c>=0){  
1108:  MOV     8D2,W4
110A:  CP      W4,#0
110C:  BRA     LT,113E
.................... 				array[SM_id - 5] = c; 
110E:  MOV.B   886,W0L
1110:  SE      W0,W0
1112:  SUB     W0,#5,W5
1114:  MOV     W5,W4
1116:  MUL.UU  W4,#4,W0
1118:  MOV     #88A,W4
111A:  ADD     W0,W4,W5
111C:  MOV     8D2,W0
111E:  CALL    1026
1122:  MOV     #0,W4
1124:  MOV     [W4++],[W5++]
1126:  MOV     [W4++],[W5++]
.................... 				if (SM_id == 5){ 
1128:  MOV.B   886,W0L
112A:  SE      W0,W0
112C:  CP      W0,#5
112E:  BRA     NZ,113A
.................... 					sign= array[0]; // value 1 = direction + , value 0 = direction - 
1130:  MOV     88A,W0
1132:  MOV     88C,W1
1134:  CALL    1070
1138:  MOV     W0,87E
.................... 				}	 
.................... 				SM_id++; 
113A:  INC.B   0886
.................... 			} 
113C:  BRA     1142
.................... 			else { 
.................... 				SM_id = 1; 
113E:  MOV.B   #1,W0L
1140:  MOV.B   W0L,886
.................... 			} 
.................... 		} 
1142:  BRA     1154
.................... 		else if (SM_id == 8){ // bit 8 
1144:  MOV.B   886,W0L
1146:  SE      W0,W0
1148:  CP      W0,#8
114A:  BRA     NZ,1154
.................... 			getPackage = 1; 
114C:  MOV     #1,W4
114E:  MOV     W4,888
.................... 			SM_id = 1; 
1150:  MOV.B   #1,W0L
1152:  MOV.B   W0L,886
.................... 		} 
1154:  MOV     [--W15],W5
1156:  RETURN  
.................... 		}	 
....................  
....................  
.................... #INT_RDA 
.................... void UART1_Isr() { 
1158:  PUSH    42
115A:  PUSH    36
115C:  PUSH    32
115E:  MOV     W0,[W15++]
1160:  MOV     #2,W0
1162:  REPEAT  #C
1164:  MOV     [W0++],[W15++]
1166:  BTSS.B  222.0
1168:  BRA     1166
116A:  MOV     226,W0
116C:  MOV.B   W0L,8CE
116E:  CLR.B   8CF
....................    	int c = getc(); 
....................    	SM_RxD(c); 
1170:  PUSH    8CE
1172:  POP     8D2
1174:  CALL    109C
1178:  BCLR.B  85.3
117A:  MOV     #1A,W0
117C:  REPEAT  #C
117E:  MOV     [--W15],[W0--]
1180:  MOV     [--W15],W0
1182:  POP     32
1184:  POP     36
1186:  POP     42
1188:  RETFIE  
.................... } 
.................... void main(){ 
*
1846:  MOV     #2780,W15
1848:  MOV     #27FF,W0
184A:  MOV     W0,20
184C:  NOP     
184E:  MOV     #4444,W0
1850:  MOV     W0,A8
1852:  BSET.B  81.7
1854:  MOV     #46,W0
1856:  MOV.B   W0L,742
1858:  MOV     #57,W0
185A:  MOV.B   W0L,742
185C:  BCLR.B  742.6
185E:  MOV     #3F0C,W0
1860:  MOV     W0,6A4
1862:  MOV     #1213,W0
1864:  MOV     W0,6C2
1866:  MOV     #300,W0
1868:  MOV     W0,6CC
186A:  MOV     #16,W0
186C:  MOV     W0,6CE
186E:  MOV     #46,W0
1870:  MOV.B   W0L,742
1872:  MOV     #57,W0
1874:  MOV.B   W0L,742
1876:  BSET.B  742.6
1878:  CLR     744
187A:  MOV     #8000,W4
187C:  MOV     W4,220
187E:  MOV     #400,W4
1880:  MOV     W4,222
1882:  BSET.B  220.3
1884:  MOV     #1A0,W4
1886:  MOV     W4,228
1888:  CLR     86A
188A:  CLR     86C
188C:  MOV     #1,W4
188E:  MOV     W4,876
1890:  MOV.B   #1,W0L
1892:  MOV.B   W0L,886
1894:  CLR     888
1896:  CLR     8AA
1898:  CLR     8AC
189A:  SETM    32C
.................... 	Init_Interrupts(); 
189C:  CALL    118A
.................... 	//setzero(); 
.................... 	float float_num; 
.................... 	A =0.000; 
18A0:  CLR     8AA
18A2:  CLR     8AC
.................... 	s = 0; 
18A4:  CLR     85E
18A6:  CLR     860
.................... 	p = 0; 
18A8:  CLR     862
18AA:  CLR     864
.................... 	Kp = 200; 
18AC:  MOV     #C8,W4
18AE:  MOV     W4,870
.................... 	Ki = 0.1; 
18B0:  CLR     872
.................... 	Kd = 0; 
18B2:  CLR     874
.................... 	 
.................... 	while(TRUE){ 
.................... 	if (getPackage == 1 && state == 1){ // state 1 set zero 
18B4:  MOV     888,W4
18B6:  CP      W4,#1
18B8:  BRA     NZ,18FE
18BA:  MOV     878,W4
18BC:  CP      W4,#1
18BE:  BRA     NZ,18FE
.................... 			getPackage = 0; 
18C0:  CLR     888
.................... 			printf("state%d pic2\n",state); 
18C2:  MOV     #0,W1
18C4:  MOV     W1,W0
18C6:  CLR.B   1
18C8:  CALL    DFC
18CC:  INC     W1,W1
18CE:  BTSC.B  223.1
18D0:  BRA     18CE
18D2:  MOV     W0,224
18D4:  MOV     #4,W0
18D6:  CPSGT   W1,W0
18D8:  BRA     18C4
18DA:  MOV     878,W0
18DC:  MOV     #0,W4
18DE:  CALL    11C6
18E2:  MOV     #7,W1
18E4:  MOV     W1,W0
18E6:  CLR.B   1
18E8:  CALL    DFC
18EC:  INC     W1,W1
18EE:  BTSC.B  223.1
18F0:  BRA     18EE
18F2:  MOV     W0,224
18F4:  MOV     #C,W0
18F6:  CPSGT   W1,W0
18F8:  BRA     18E4
.................... 			setzero(); 
18FA:  CALL    12BC
.................... 			//Sent request 
.................... 					} 
.................... 	if (getPackage == 1 && state == 2){ // state 2 goto position 
18FE:  MOV     888,W4
1900:  CP      W4,#1
1902:  BRA     NZ,19A8
1904:  MOV     878,W4
1906:  CP      W4,#2
1908:  BRA     NZ,19A8
.................... 			e=0,u=0; 
190A:  CLR     85A
190C:  CLR     85C
190E:  CLR     86E
.................... 			//printf("id%d pic2\n",id); 
.................... 			//printf("state%d\n pic2",state); 
.................... 			if(sign  == 1){ // If direction = 1 position A + 
1910:  MOV     87E,W4
1912:  CP      W4,#1
1914:  BRA     NZ,1944
.................... 				A = array[1] + (array[2]/100); 
1916:  MOV     892,W0
1918:  MOV     894,W1
191A:  MOV     #0,W2
191C:  MOV     #42C8,W3
191E:  CALL    12E0
1922:  BCLR.B  43.0
1924:  PUSH    42
1926:  BCLR.B  81.7
1928:  SETM.B  42
192A:  BSET.B  81.7
192C:  MOV     W0,W2
192E:  MOV     W1,W3
1930:  MOV     88E,W0
1932:  MOV     890,W1
1934:  CALL    E2C
1938:  BCLR.B  81.7
193A:  POP     42
193C:  BSET.B  81.7
193E:  MOV     W0,8AA
1940:  MOV     W1,8AC
.................... 				//printf("direction%d\n pic2",sign); 
.................... 				//printf("A%f\n",A); 
.................... 			} 
1942:  BRA     1980
.................... 			else if(sign == 0){ // If direction = 0 position A - 
1944:  CP0     87E
1946:  BRA     NZ,1980
.................... 				A = -1*(array[1] + (array[2]/100)); 
1948:  MOV     892,W0
194A:  MOV     894,W1
194C:  MOV     #0,W2
194E:  MOV     #42C8,W3
1950:  CALL    12E0
1954:  BCLR.B  43.0
1956:  PUSH    42
1958:  BCLR.B  81.7
195A:  SETM.B  42
195C:  BSET.B  81.7
195E:  MOV     W0,W2
1960:  MOV     W1,W3
1962:  MOV     88E,W0
1964:  MOV     890,W1
1966:  CALL    E2C
196A:  BCLR.B  81.7
196C:  POP     42
196E:  BSET.B  81.7
1970:  MOV     W0,W2
1972:  MOV     W1,W3
1974:  MOV     #0,W0
1976:  MOV     #BF80,W1
1978:  CALL    13AA
197C:  MOV     W0,8AA
197E:  MOV     W1,8AC
.................... 				//printf("direction%d\n",sign); 
.................... 			} 
....................  
.................... 			do{ 
.................... 				output_low(PIN_A1); 
1980:  BCLR.B  2C0.1
1982:  BCLR.B  2C4.1
.................... 				pid(A); 
1984:  PUSH    8AA
1986:  POP     8B4
1988:  PUSH    8AC
198A:  POP     8B6
198C:  CALL    1534
.................... 				//printf("\nresult = %s\n", print_float(u)); 
.................... 				//printf("\nerror = %s\n", print_float(e)); 
.................... 			}while(abs(u)>0); 
1990:  MOV     86E,W0
1992:  BTSS    W0.F
1994:  BRA     199C
1996:  MOV     #0,W4
1998:  MOV     86E,W3
199A:  SUB     W4,W3,W0
199C:  MOV     W0,W5
199E:  CP      W5,#0
19A0:  BRA     GT,1980
.................... 				output_high(PIN_A1); 
19A2:  BCLR.B  2C0.1
19A4:  BSET.B  2C4.1
.................... 				//printf("B finish"); 
.................... 				getPackage = 0; 
19A6:  CLR     888
....................  
.................... 			// Verify 
.................... 		} 
.................... 	if (getPackage == 1 && state == 3){ // state 3 
19A8:  MOV     888,W4
19AA:  CP      W4,#1
19AC:  BRA     NZ,1A1C
19AE:  MOV     878,W4
19B0:  CP      W4,#3
19B2:  BRA     NZ,1A1C
.................... 			getPackage = 0; 
19B4:  CLR     888
.................... 			printf("state%d\n",state); 
19B6:  MOV     #0,W1
19B8:  MOV     W1,W0
19BA:  CLR.B   1
19BC:  CALL    E16
19C0:  INC     W1,W1
19C2:  BTSC.B  223.1
19C4:  BRA     19C2
19C6:  MOV     W0,224
19C8:  MOV     #4,W0
19CA:  CPSGT   W1,W0
19CC:  BRA     19B8
19CE:  MOV     878,W0
19D0:  MOV     #0,W4
19D2:  CALL    11C6
19D6:  BTSC.B  223.1
19D8:  BRA     19D6
19DA:  MOV     #A,W4
19DC:  MOV     W4,224
.................... 			printf("%d %d %d \n",array[0],array[1],array[2]); 
19DE:  MOV     88A,W0
19E0:  MOV     88C,W1
19E2:  MOV     #0,W4
19E4:  CALL    16C6
19E8:  BTSC.B  223.1
19EA:  BRA     19E8
19EC:  MOV     #20,W4
19EE:  MOV     W4,224
19F0:  MOV     88E,W0
19F2:  MOV     890,W1
19F4:  MOV     #0,W4
19F6:  CALL    16C6
19FA:  BTSC.B  223.1
19FC:  BRA     19FA
19FE:  MOV     #20,W4
1A00:  MOV     W4,224
1A02:  MOV     892,W0
1A04:  MOV     894,W1
1A06:  MOV     #0,W4
1A08:  CALL    16C6
1A0C:  BTSC.B  223.1
1A0E:  BRA     1A0C
1A10:  MOV     #20,W4
1A12:  MOV     W4,224
1A14:  BTSC.B  223.1
1A16:  BRA     1A14
1A18:  MOV     #A,W4
1A1A:  MOV     W4,224
.................... 					} 
.................... 	if (getPackage == 1 && state == 4){ // state 4 
1A1C:  MOV     888,W4
1A1E:  CP      W4,#1
1A20:  BRA     NZ,1AC6
1A22:  MOV     878,W4
1A24:  CP      W4,#4
1A26:  BRA     NZ,1AC6
.................... 			action=(int)array[0]; 
1A28:  PUSH    42
1A2A:  BCLR.B  81.7
1A2C:  SETM.B  42
1A2E:  BSET.B  81.7
1A30:  MOV     88A,W0
1A32:  MOV     88C,W1
1A34:  CALL    1070
1A38:  BCLR.B  81.7
1A3A:  POP     42
1A3C:  BSET.B  81.7
1A3E:  MOV     W0,884
.................... 			grab(action); 
1A40:  PUSH    884
1A42:  POP     8B4
1A44:  CALL    17DA
.................... 			getPackage = 0; 
1A48:  CLR     888
.................... 			printf("%d %d %d \n",(int)array[0],array[1],array[2]); 
1A4A:  PUSH    42
1A4C:  BCLR.B  81.7
1A4E:  SETM.B  42
1A50:  BSET.B  81.7
1A52:  MOV     88A,W0
1A54:  MOV     88C,W1
1A56:  CALL    1070
1A5A:  BCLR.B  81.7
1A5C:  POP     42
1A5E:  BSET.B  81.7
1A60:  MOV     W0,W5
1A62:  MOV     W5,W0
1A64:  MOV     #0,W4
1A66:  CALL    11C6
1A6A:  BTSC.B  223.1
1A6C:  BRA     1A6A
1A6E:  MOV     #20,W4
1A70:  MOV     W4,224
1A72:  MOV     88E,W0
1A74:  MOV     890,W1
1A76:  MOV     #0,W4
1A78:  CALL    16C6
1A7C:  BTSC.B  223.1
1A7E:  BRA     1A7C
1A80:  MOV     #20,W4
1A82:  MOV     W4,224
1A84:  MOV     892,W0
1A86:  MOV     894,W1
1A88:  MOV     #0,W4
1A8A:  CALL    16C6
1A8E:  BTSC.B  223.1
1A90:  BRA     1A8E
1A92:  MOV     #20,W4
1A94:  MOV     W4,224
1A96:  BTSC.B  223.1
1A98:  BRA     1A96
1A9A:  MOV     #A,W4
1A9C:  MOV     W4,224
.................... 			printf("state%d\n",state); 
1A9E:  MOV     #0,W1
1AA0:  MOV     W1,W0
1AA2:  CLR.B   1
1AA4:  CALL    E16
1AA8:  INC     W1,W1
1AAA:  BTSC.B  223.1
1AAC:  BRA     1AAA
1AAE:  MOV     W0,224
1AB0:  MOV     #4,W0
1AB2:  CPSGT   W1,W0
1AB4:  BRA     1AA0
1AB6:  MOV     878,W0
1AB8:  MOV     #0,W4
1ABA:  CALL    11C6
1ABE:  BTSC.B  223.1
1AC0:  BRA     1ABE
1AC2:  MOV     #A,W4
1AC4:  MOV     W4,224
.................... 		} 
.................... 	if (getPackage == 1 && state == 5){ // state 5 
1AC6:  MOV     888,W4
1AC8:  CP      W4,#1
1ACA:  BRA     NZ,1B8A
1ACC:  MOV     878,W4
1ACE:  CP      W4,#5
1AD0:  BRA     NZ,1B8A
.................... 			Z=(int)array[0]+(int)array[1]; 
1AD2:  PUSH    42
1AD4:  BCLR.B  81.7
1AD6:  SETM.B  42
1AD8:  BSET.B  81.7
1ADA:  MOV     88A,W0
1ADC:  MOV     88C,W1
1ADE:  CALL    1070
1AE2:  BCLR.B  81.7
1AE4:  POP     42
1AE6:  BSET.B  81.7
1AE8:  MOV     W0,W5
1AEA:  PUSH    42
1AEC:  BCLR.B  81.7
1AEE:  SETM.B  42
1AF0:  BSET.B  81.7
1AF2:  MOV     88E,W0
1AF4:  MOV     890,W1
1AF6:  CALL    1070
1AFA:  BCLR.B  81.7
1AFC:  POP     42
1AFE:  BSET.B  81.7
1B00:  ADD     W0,W5,W0
1B02:  MOV     W0,880
.................... 			grip(Z); 
1B04:  PUSH    880
1B06:  POP     8B4
1B08:  CALL    180E
.................... 			getPackage = 0; 
1B0C:  CLR     888
.................... 			printf("%d %d %d \n",(int)array[0],array[1],array[2]); 
1B0E:  PUSH    42
1B10:  BCLR.B  81.7
1B12:  SETM.B  42
1B14:  BSET.B  81.7
1B16:  MOV     88A,W0
1B18:  MOV     88C,W1
1B1A:  CALL    1070
1B1E:  BCLR.B  81.7
1B20:  POP     42
1B22:  BSET.B  81.7
1B24:  MOV     W0,W5
1B26:  MOV     W5,W0
1B28:  MOV     #0,W4
1B2A:  CALL    11C6
1B2E:  BTSC.B  223.1
1B30:  BRA     1B2E
1B32:  MOV     #20,W4
1B34:  MOV     W4,224
1B36:  MOV     88E,W0
1B38:  MOV     890,W1
1B3A:  MOV     #0,W4
1B3C:  CALL    16C6
1B40:  BTSC.B  223.1
1B42:  BRA     1B40
1B44:  MOV     #20,W4
1B46:  MOV     W4,224
1B48:  MOV     892,W0
1B4A:  MOV     894,W1
1B4C:  MOV     #0,W4
1B4E:  CALL    16C6
1B52:  BTSC.B  223.1
1B54:  BRA     1B52
1B56:  MOV     #20,W4
1B58:  MOV     W4,224
1B5A:  BTSC.B  223.1
1B5C:  BRA     1B5A
1B5E:  MOV     #A,W4
1B60:  MOV     W4,224
.................... 			printf("state%d\n",state); 
1B62:  MOV     #0,W1
1B64:  MOV     W1,W0
1B66:  CLR.B   1
1B68:  CALL    E16
1B6C:  INC     W1,W1
1B6E:  BTSC.B  223.1
1B70:  BRA     1B6E
1B72:  MOV     W0,224
1B74:  MOV     #4,W0
1B76:  CPSGT   W1,W0
1B78:  BRA     1B64
1B7A:  MOV     878,W0
1B7C:  MOV     #0,W4
1B7E:  CALL    11C6
1B82:  BTSC.B  223.1
1B84:  BRA     1B82
1B86:  MOV     #A,W4
1B88:  MOV     W4,224
.................... 					} 
.................... 	delay_ms(10); 
1B8A:  MOV     #A,W0
1B8C:  CALL    17FE
1B90:  BRA     18B4
.................... 	//	printf("\nresult = %s\n", print_float(u)); 
.................... 	//	printf("\nerror = %s\n", print_float(e)); 
.................... } 
.................... } 
1B92:  BRA     1B92

Configuration Fuses:
   Word  1L: 377F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 DEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9F7   NOPR NOALTI2C1 IOL1WAY NOOSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  

   Some fuses have been forced to be compatible with the ICD debugger.
